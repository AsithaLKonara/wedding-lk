import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

// GET /api/conversations - Get user conversations
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const limit = parseInt(searchParams.get('limit') || '10')

    // Mock conversations data
    const mockConversations = [
      {
        id: 'conv_1',
        participants: [
          { id: 'user_1', name: 'John & Jane', avatar: '/placeholder-user.jpg' },
          { id: 'vendor_1', name: 'Grand Ballroom Hotel', avatar: '/placeholder-venue.jpg' }
        ],
        lastMessage: {
          content: 'Thank you for the venue tour! We loved it.',
          sender: 'user_1',
          timestamp: new Date(Date.now() - 3600000).toISOString()
        },
        unreadCount: 0,
        updatedAt: new Date(Date.now() - 3600000).toISOString()
      },
      {
        id: 'conv_2',
        participants: [
          { id: 'user_1', name: 'John & Jane', avatar: '/placeholder-user.jpg' },
          { id: 'vendor_2', name: 'Perfect Moments Photography', avatar: '/placeholder-user.jpg' }
        ],
        lastMessage: {
          content: 'When would you like to schedule the consultation?',
          sender: 'vendor_2',
          timestamp: new Date(Date.now() - 7200000).toISOString()
        },
        unreadCount: 1,
        updatedAt: new Date(Date.now() - 7200000).toISOString()
      },
      {
        id: 'conv_3',
        participants: [
          { id: 'user_1', name: 'John & Jane', avatar: '/placeholder-user.jpg' },
          { id: 'vendor_3', name: 'Elegant Catering', avatar: '/placeholder-user.jpg' }
        ],
        lastMessage: {
          content: 'We can accommodate your dietary requirements.',
          sender: 'vendor_3',
          timestamp: new Date(Date.now() - 86400000).toISOString()
        },
        unreadCount: 0,
        updatedAt: new Date(Date.now() - 86400000).toISOString()
      }
    ]

    return NextResponse.json({
      success: true,
      data: mockConversations.slice(0, limit),
      total: mockConversations.length
    })

  } catch (error) {
    console.error('Conversations error:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to load conversations',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

// POST /api/conversations - Create new conversation
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { participantId, initialMessage } = body

    if (!participantId) {
      return NextResponse.json({
        error: 'Participant ID is required'
      }, { status: 400 })
    }

    // Mock conversation creation
    const newConversation = {
      id: `conv_${Date.now()}`,
      participants: [
        { id: 'user_1', name: 'John & Jane', avatar: '/placeholder-user.jpg' },
        { id: participantId, name: 'Vendor Name', avatar: '/placeholder-user.jpg' }
      ],
      lastMessage: initialMessage ? {
        content: initialMessage,
        sender: 'user_1',
        timestamp: new Date().toISOString()
      } : null,
      unreadCount: 0,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    return NextResponse.json({
      success: true,
      data: newConversation,
      message: 'Conversation created successfully'
    })

  } catch (error) {
    console.error('Create conversation error:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to create conversation',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
} 