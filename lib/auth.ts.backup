import type { NextAuthOptions } from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import Google from "next-auth/providers/google"
import FacebookProvider from "next-auth/providers/facebook"
import { connectDB } from "./db"
import { User } from "./models/user"
import bcrypt from "bcryptjs"

// Extend the built-in session types
declare module "next-auth" {
  interface Session {
    user: {
      id: string
      name?: string | null
      email?: string | null
      image?: string | null
      role?: string
      twoFactorPending?: boolean
    }
  }
  
  interface User {
    id: string
    email: string
    name?: string
    role?: string
    twoFactorPending?: boolean
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    role?: string
    twoFactorPending?: boolean
  }
}

export const authOptions: NextAuthOptions = {
  providers: [
    // Google({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    FacebookProvider({
      clientId: process.env.FACEBOOK_CLIENT_ID!,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        try {
          await connectDB()

          // Find user by email or username
          const user = await User.findOne({
            $or: [
              { email: credentials.email },
              { username: credentials.email }
            ]
          })

          if (!user) {
            console.log("User not found:", credentials.email)
            return null
          }

          // For now, allow simple password check (in production, use bcrypt)
          if (user.password === credentials.password || 
              (user.password && await bcrypt.compare(credentials.password, user.password))) {
            return {
              id: user._id.toString(),
              email: user.email,
              name: user.name || `${user.firstName} ${user.lastName}`,
              role: user.role,
            }
          }

          console.log("Invalid password for user:", credentials.email)
          return null
        } catch (error) {
          console.error("Auth error:", error)
          return null
        }
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  pages: {
    signIn: "/login",
  },
  callbacks: {
    async jwt({ token, user, account }) {
      if (user && "role" in user) {
        token.role = (user as any).role
      }
      if (user && "twoFactorPending" in user) {
        token.twoFactorPending = (user as any).twoFactorPending
      }
      return token
    },
    async session({ session, token }) {
      if (token && session.user) {
        session.user.id = token.sub!
        if (token.role) session.user.role = token.role as string
        if (token.twoFactorPending) session.user.twoFactorPending = token.twoFactorPending
      }
      return session
    },
  },
}
