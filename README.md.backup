# WeddingLK - Wedding Planning Platform

A comprehensive wedding planning platform built with Next.js, TypeScript, and MongoDB. Features include vendor management, venue booking, budget tracking, and real-time notifications.

## 🚀 Features

### Core Features
- **Vendor Management**: Browse and book wedding vendors (photographers, caterers, etc.)
- **Venue Booking**: Find and reserve wedding venues with detailed information
- **Budget Tracker**: Monitor wedding expenses and stay within budget
- **Wedding Timeline**: Plan and track wedding milestones
- **Guest List Management**: Organize guest information and RSVPs
- **Task Management**: Create and track wedding planning tasks
- **Real-time Notifications**: Get instant updates on bookings and messages

### Advanced Features
- **AI-Powered Search**: Intelligent search and recommendations
- **Payment Integration**: Secure payment processing with Stripe
- **Email Notifications**: Automated email confirmations and updates
- **Responsive Design**: Mobile-first design for all devices
- **Accessibility**: WCAG compliant with screen reader support

## 🛠️ Tech Stack

- **Frontend**: Next.js 15, React 19, TypeScript
- **Styling**: Tailwind CSS, Radix UI
- **Database**: MongoDB with Mongoose
- **Authentication**: NextAuth.js
- **Payments**: Stripe
- **Email**: Nodemailer
- **Real-time**: Socket.IO
- **Testing**: Jest, React Testing Library

## 📋 Prerequisites

- Node.js 18+ 
- MongoDB (local or cloud)
- npm or yarn

## 🚀 Quick Start

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd WeddingLK-next
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Set up environment variables**
   ```bash
   cp .env.local.example .env.local
   ```
   Edit `.env.local` with your configuration values.

4. **Set up the database**
   ```bash
   # Start MongoDB (if running locally)
   mongod
   
   # Seed the database with sample data
   npm run seed
   ```

5. **Run the development server**
   ```bash
   npm run dev
   ```

6. **Open your browser**
   Navigate to [http://localhost:3000](http://localhost:3000)

## 🧪 Testing

Run the test suite:
```bash
npm run test
```

Run tests with coverage:
```bash
npm run test -- --coverage
```

## 🏗️ Building for Production

1. **Build the application**
   ```bash
   npm run build
   ```

2. **Start the production server**
   ```bash
   npm start
   ```

## 📊 Database Schema

### Users
- Basic user information (name, email, phone)
- Role-based access (couple, vendor, admin, planner)
- Authentication and verification status

### Venues
- Venue details (name, description, location)
- Capacity, pricing, and availability
- Amenities and contact information
- Ratings and reviews

### Vendors
- Vendor information (name, category, services)
- Pricing packages and availability
- Contact details and verification status

### Bookings
- Booking details (user, venue/vendor, date, time)
- Payment status and total amount
- Guest count and special requirements

### Reviews
- User reviews for venues and vendors
- Ratings, comments, and helpful votes
- Verification status

## 🔧 Configuration

### Environment Variables

Create a `.env.local` file with the following variables:

```env
# Database
MONGODB_URI=mongodb://localhost:27017/weddinglk

# Authentication
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key-here

# Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Stripe
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key

# Socket.IO
NEXT_PUBLIC_SOCKET_URL=http://localhost:3001
```

## 🚀 Deployment

### Vercel (Recommended)

1. **Connect your repository to Vercel**
2. **Set environment variables** in Vercel dashboard
3. **Deploy** - Vercel will automatically build and deploy

### Other Platforms

The application can be deployed to any platform that supports Node.js:

- **Netlify**: Use the build command `npm run build`
- **Railway**: Connect your repository and set environment variables
- **DigitalOcean App Platform**: Deploy with automatic scaling

## 📁 Project Structure

```
WeddingLK-next/
├── app/                    # Next.js app directory
│   ├── api/               # API routes
│   ├── dashboard/         # Dashboard pages
│   ├── vendors/          # Vendor pages
│   └── venues/           # Venue pages
├── components/            # React components
│   ├── atoms/            # Basic UI components
│   ├── molecules/        # Compound components
│   ├── organisms/        # Complex components
│   └── ui/               # Shadcn/ui components
├── lib/                  # Utility functions
│   ├── models/           # MongoDB models
│   ├── auth.ts           # Authentication utilities
│   ├── db.ts             # Database connection
│   └── utils.ts          # General utilities
├── hooks/                # Custom React hooks
├── scripts/              # Database seeding and utilities
└── public/               # Static assets
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🆘 Support

For support, email support@weddinglk.com or create an issue in the repository.

## 🔄 Changelog

### v1.0.0
- Initial release
- Core wedding planning features
- Vendor and venue management
- Budget tracking and task management
- Real-time notifications
- Payment integration
- Responsive design and accessibility

---

Made with ❤️ by the WeddingLK team
