name: Deploy to Vercel

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Test and build
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit -- --ci --coverage

      - name: Build application
        run: npm run build
        env:
          NEXTAUTH_URL: https://wedding-lkcom.vercel.app
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Deploy to Vercel Preview
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  # Deploy to Vercel Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run Post-Deployment Tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Wait for deployment to be ready
          sleep 30
          
          # Test critical endpoints
          curl -f https://wedding-lkcom.vercel.app/api/health || exit 1
          curl -f https://wedding-lkcom.vercel.app/api/vendors || exit 1
          curl -f https://wedding-lkcom.vercel.app/api/venues || exit 1
          
          echo "✅ All smoke tests passed!"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🚀 Successfully deployed to https://wedding-lkcom.vercel.app"
          echo "Deployment URL: https://wedding-lkcom.vercel.app"
          echo "Build completed at: $(date)"

  # Deploy to Vercel Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run Staging Tests
        run: |
          echo "Running staging tests..."
          # Wait for deployment to be ready
          sleep 30
          
          # Test critical endpoints
          curl -f ${{ steps.deploy.outputs.preview-url }}/api/health || exit 1
          
          echo "✅ Staging deployment successful!"

  # Security and Performance Checks
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Performance Check
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXTAUTH_URL: https://wedding-lkcom.vercel.app
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging, deploy-preview, security-check, performance-check]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-production.result == 'success' && '✅ Deployed' || '❌ Failed' }} | https://wedding-lkcom.vercel.app |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result == 'success' && '✅ Deployed' || '❌ Failed' }} | Preview URL |" >> $GITHUB_STEP_SUMMARY
          echo "| Preview | ${{ needs.deploy-preview.result == 'success' && '✅ Deployed' || '❌ Failed' }} | PR Preview URL |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

