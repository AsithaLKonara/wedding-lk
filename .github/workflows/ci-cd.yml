name: 🚀 WeddingLK Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily security scan at 2 AM UTC

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Code Quality & Testing
  quality-check:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: 📦 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm run install:all
    
    - name: 🔧 TypeScript check
      run: npm run type-check
    
    - name: 🧹 ESLint check
      run: npm run lint
    
    - name: 🎨 Prettier check
      run: npm run format:check
    
    - name: 🧪 Unit tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 🏗️ Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL || 'https://wedding-lkcom.vercel.app' }}
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
    
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          package-lock.json

  # 🔒 Security & Compliance
  security-audit:
    name: 🔒 Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: 🔍 NPM audit
      run: npm audit --audit-level moderate --json > audit-results.json || true
    
    - name: 🛡️ Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
    
    - name: 🔐 OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'WeddingLK'
        path: '.'
        format: 'JSON'
        out: 'dependency-check-report'
      continue-on-error: true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          audit-results.json
          dependency-check-report/

  # 🧪 Integration & E2E Tests
  integration-tests:
    name: 🧪 Integration & E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: quality-check
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline
    
    - name: 🧪 Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/weddinglk_test
        REDIS_URL: redis://localhost:6379
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000
    
    - name: 🎭 Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/weddinglk_test
        REDIS_URL: redis://localhost:6379
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

  # 🚀 Performance Testing
  performance-test:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quality-check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline
    
    - name: 🏗️ Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_APP_URL: https://wedding-lkcom.vercel.app
    
    - name: 🚀 Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: production
        PORT: 3000
    
    - name: 📊 Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: ⚡ Run K6 load tests
      run: |
        npm install -g k6
        k6 run tests/performance/load-test.js
      continue-on-error: true

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--env NEXT_PUBLIC_APP_URL=https://wedding-lkcom-staging.vercel.app'
    
    - name: 📊 Run smoke tests
      run: |
        npm install -g artillery
        artillery run tests/smoke/smoke-test.yml
      env:
        TARGET_URL: https://wedding-lkcom-staging.vercel.app

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit, integration-tests, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod --env NEXT_PUBLIC_APP_URL=https://wedding-lkcom.vercel.app'
    
    - name: 📊 Run production smoke tests
      run: |
        npm install -g artillery
        artillery run tests/smoke/production-smoke-test.yml
      env:
        TARGET_URL: https://wedding-lkcom.vercel.app
    
    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 📊 Post-Deployment Monitoring
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Health check
      run: |
        curl -f https://wedding-lkcom.vercel.app/api/health || exit 1
    
    - name: 📊 Performance check
      run: |
        curl -w "@curl-format.txt" -o /dev/null -s https://wedding-lkcom.vercel.app/
      env:
        CURL_FORMAT: |
          time_namelookup:  %{time_namelookup}\n
          time_connect:     %{time_connect}\n
          time_appconnect:  %{time_appconnect}\n
          time_pretransfer: %{time_pretransfer}\n
          time_redirect:    %{time_redirect}\n
          time_starttransfer: %{time_starttransfer}\n
          time_total:       %{time_total}\n
